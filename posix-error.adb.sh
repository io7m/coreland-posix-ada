#!/bin/sh

cat LICENSE       || exit 1
cat auto-warn.txt || exit 1
cat <<EOF
with POSIX.C_Types;
with System;

package body POSIX.Error is

EOF

echo '  -- Errno values (generated by errno_constants.lua)'
./errno_constants.lua errno_to_int.map || exit 1
echo
echo '  -- Errno mappings (generated by errno_map.lua)'
./errno_map.lua errno_to_int.map errno_to_ada.map || exit 1

cat <<EOF

  function Get_Error return Error_t is
  begin
    return Errno_To_Ada (Errno.Errno_Get);
  end Get_Error;

  procedure Set_Error (Error_Value : in Error_t) is
  begin
    Errno.Errno_Set (Ada_To_Errno (Error_Value));
  end Set_Error;

  procedure C_Message
    (Error_Value    : in Errno.Errno_Integer_t;
     Message_Buffer : out Message_t;
     Last_Index     : out Message_Index_t)
    --# derives Message_Buffer, Last_Index from Error_Value;
  is
    --# hide C_Message
    function C_strerror_r
      (Error_Value : in Errno.Errno_Integer_t;
       Buffer      : in System.Address;
       Buffer_Size : in System.Address) return C_Types.Size_t;
    pragma Import (C, C_strerror_r, "posix_strerror_r");
  begin
    Last_Index := Message_Index_t (C_strerror_r
      (Error_Value => Error_Value,
       Buffer      => Message_Buffer (Message_Buffer'First)'Address,
       Buffer_Size => Last_Index'Address));
  end C_Message;

  procedure Message
    (Error_Value    : in Error_t;
     Message_Buffer : out Message_t;
     Last_Index     : out Message_Index_t) is
  begin
    C_Message
      (Error_Value    => Ada_To_Errno (Error_Value),
       Message_Buffer => Message_Buffer,
       Last_Index     => Last_Index);
  end Message;

end POSIX.Error;
EOF
